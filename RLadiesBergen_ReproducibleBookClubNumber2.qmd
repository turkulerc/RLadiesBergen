---
title: "Version Control with Git"
subtitle: "Reproducible Book Club #2"
author: "Turkuler Ozgumus"
date: "2023-11-07"
format: 
  revealjs:
    theme: night
include-in-header:
  - text: |
      <style>
      #title-slide .title {
        color: #ffffff;
      }
      #title-slide {
        color: #ffffff;
      }
      </style>
title-slide-attributes: 
  data-background-image: img/branches.jpg
---

## Outline

Chapter 4 of Building reproducible analytical pipelines with R

- Version control
- Git
- Github
- Use of Git and Github

## Version control

- Keep track of changes on text files
- It is possible to see  
  - how the file changed,
  - who made the changes and, 
  - when these are made.

::: {.notes}
Version control tools make it easy to keep track of the changes that were made to text files (like R scripts). Any change made to any file of a project is catalogued, making it possible to trace back how the file changed, who made the changes, and when these changes were made.

:::

## So what?

- Easy collaboration
- Safe backup
- Adding/not adding new features

::: {.notes}
Using version control it is also quite easy to collaborate on a project by forcing team members to deal explicitly with the potential conflicts that might arise when the same file got changed by different people at the same time. Should your computer get lost, stolen, or explode, your projects are safely backed up on a server: this is because version control tools make use of a server which keeps track of all the changes.
Version control tools also make it easy to experiment with new ideas. You can start new branches which essentially make a copy of your current project. In this new branch, you can safely experiment with new features, and if the experiments are not conclusive, you can simply discard this branch: the original copy of your project will remain untouched. 
:::

## Git

- Git is a tool to be used to control the version.
- It should be installed on the computer before usage.  

## Github

- Is an online service to host project repositories.
- One should have an account to be able to use it.
- Pros:  
  - Large community
  - Continuous integration via Github Actions  
- Cons:
  - Owned by Microsoft (privacy issues)
  - Not possible to self-host an instance of Github
- There are alternatives: Gitlab, Bitbucket...

::: {.notes}
Github Actions is literally a computer in the cloud that you can use to run a set of actions each time you interact with the repository (or at defined moments as well). For example, it would be possible to run automated tests each time a collaborator uploads some changes to the project.
:::

## Some notes!

- Do not put git repositories into cloud services like Dropbox and Onedrive:
![](https://media.makeameme.org/created/conflicts-conflicts-everywhere-5ab1de.jpg)
- Public repository does not mean that everyone can make changes on the files.

::: {.notes}
 The issue is that inside a project that is being tracked by Git, there is a hidden folder with many files that get used for synching the project and making sure that everything runs smoothly. If you put a Git-enabled project inside a Dropbox folder, these files will get accessed simultaneously by different people, and Dropbox will start making copies of these because of conflicts. This really messes up the project and can lead to data loss. Let Git handle the tracking and the collaborating for you. Unlike Dropbox (or similar services), Git deals with conflicts not on a per-file basis, but on a per-line basis. So if two collaborators change the same file, but different lines of this same file, there will be no conflict: Git will handle the merge on its own.
Anyone can fork the repository (essentially making a copy of the repository to their Github account) and then suggest some changes in a so-called pull request. The maintainer and owner of the original project can then accept these edits or not.
:::

## Installing Git

- open terminal (Linux, macOS) or command prompt (Windows)
- run

```bash
which git
```

or 

```bash
git --version
```

## Installing Git

- on Linux

````bash
sudo apt-get update
sudo apt-get install git
```

or https://git-scm.com/download/linux

- on macOS:

https://git-scm.com/download/mac

- on Windows:

https://git-scm.com/download/win

## Opening a Github account

- Open https://github.com

:::{.fragment}
![](https://media.makeameme.org/created/yeah-if-you-7tjfok.jpg)
:::

## Git superbasics

- Create a folder called *housing*
- Save below scripts under this folder  
    - save_data.R: https://is.gd/7PhUjd  
    - analysis.R: https://is.gd/qCJEbi

## Git superbasics

- On terminal, go to *housing* folder by using

```bash
cd /path/to/folder/housing
```
or

- Open the folder on file explorer  
  - On Linux, right-click inside the folder and select "Open Terminal here" or similar
  - On Windows, right-click inside the folder and select "Open Git Bash here" or similar
  - On macOS, activate this option by using google search results for "open terminal at folder macOS"

## Git superbasics

- Use ls and check folder contents

```bash
ls
```

## Git superbasics

```bash
git init
```


## Git and Github

## Git and Github

## Git and Github

## Git to know Github

